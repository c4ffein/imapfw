#
# Used by me to development purposes.
#

# The number of concurrent workers for the accounts. Default is the number of accounts to sync.
MainConf = { 'max_sync_accounts': 2 }

UI = None

def configure(ui):
    global UI
    UI = ui

def preHook(hook, actionName, actionOptions):
    hook.ended()

def postHook(hook):
    hook.ended()

def exceptionHook(hook, error):
    hook.ended()

from imapfw.api import controllers, types, drivers, shells

maildirsPath = "~/.imapfw/Mail"


MaildirConfA = { 'path': maildirsPath + '/MaildirA', 'max_connections': 9 }
MaildirConfB = { 'path': maildirsPath + '/MaildirB', 'max_connections': 2 }

ImapConfA = {
    **{ 'backend': 'imaplib3', 'host': '127.0.0.1', 'port': '10143', 'max_connections': 3 },
    **{ 'username': 'nicolas',    'password': 'sebrecht' },
}

class FakeMaildirA(controllers.FakeDriver):
    conf = controllers.FakeDriver.MaildirConf
class FakeMaildirB(controllers.FakeDriver):
    conf = controllers.FakeDriver.MaildirConf

#class MaildirA(types.Maildir): #    conf = MaildirConfA #    driver = drivers.Maildir # Default: drivers.Maildir. #    controllers = [FakeMaildirA]
#class MaildirB(types.Maildir): #    conf = MaildirConfB #    driver = drivers.Maildir # Default: drivers.Maildir. #    controllers = [FakeMaildirB]

#FakeDrivers={
#    "FakeMaildirB": { "conf": controllers.FakeDriver.MaildirConf }
#}


Maildirs={
    "MaildirA": { "conf": MaildirConfA, "driver": drivers.Maildir, "controllers": [FakeMaildirA] },
    "MaildirB": { "conf": MaildirConfB, "driver": drivers.Maildir, "controllers": [FakeMaildirB] },
}


class FakeImapA(controllers.FakeDriver):
    conf = controllers.FakeDriver.ImapConf

class ImapA(types.Imap):
    conf = ImapConfA
    driver = drivers.Imap # Default: drivers.Imap.
    controllers = [FakeImapA]


#class Home(types.Account):#    left = "MaildirA"  # TODO ADAPT #    right = "ImapA"  # TODO ADAPT
#class Foundation(types.Account): #    left = "MaildirB"  # TODO ADAPT #    right = "ImapA"  # TODO ADAPT

Home = { "left": "MaildirA", "right": "ImapA" }
Foundation = { "left": "MaildirB", "right": "ImapA" }


# To work on IMAP driver.
class DriveDriver(shells.DriveDriver):
    def session(self):
        d = self.d

        d.connect()
        d.login()
        self.interactive()
        d.logout()

#TODO : Mechanism to put the good repository in _nrascal
#class DriveMaildirA(DriveDriver):
#    conf = {'repository': MaildirA}
#class DriveImapA(DriveDriver):
#    conf = {'repository': ImapA}

DriveDrivers={
    "DriveMaildirA": { "conf": {"repository": "MaildirA" } },
    "DriveImapA": { "conf": {"repository": "ImapA" } },
}


# To work on messages.
class MShell(shells.Shell):
    def beforeSession(self):
        self.m = types.message.Message(2)
        self.n = types.message.Message(3)
        self.o = types.message.Message(4)
        self.a = types.message.Messages(self.m, self.n)

        self.register('m')
        self.register('n')
        self.register('o')
        self.register('a')

    def session(self):
        m = self.m
        n = self.n
        o = self.o
        a = self.a

        print(m in a)
        print(o in a)
        self.interactive()



# vim: syntax=python ts=4 expandtab :
